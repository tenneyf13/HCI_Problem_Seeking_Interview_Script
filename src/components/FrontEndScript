import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { ChevronLeft, ChevronRight, MessageCircle, Flag } from 'lucide-react';

const AdaptiveInterviewGuide = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [responses, setResponses] = useState({});
  const [path, setPath] = useState('main');
  const [flags, setFlags] = useState({
    needsHelp: false,
    experiencedUser: false,
    hasAnxiety: false,
    usesMultipleDevices: false
  });

  const updateFlag = (flag, value) => {
    setFlags(prev => ({
      ...prev,
      [flag]: value
    }));
  };

  const script = {
    main: [
      {
        phase: "Consent & Background",
        mainPrompt: "Hi, thank you for participating. Before we begin, I need to let you know that I'll be recording our conversation. Is that okay with you?",
        choices: [
          {
            text: "Yes - Comfortable with recording",
            next: "proceed",
          },
          {
            text: "No - Uncomfortable with recording",
            next: "alternative",
            action: () => updateFlag('needsAlternative', true)
          }
        ],
        tips: "If they decline recording, mention you'll take written notes instead."
      },
      {
        phase: "Technology Comfort Level",
        mainPrompt: "How would you describe your overall comfort level with technology?",
        choices: [
          {
            text: "Very comfortable/experienced",
            next: "expert",
            action: () => updateFlag('experiencedUser', true)
          },
          {
            text: "Somewhat comfortable",
            next: "moderate"
          },
          {
            text: "Not very comfortable",
            next: "beginner",
            action: () => updateFlag('needsHelp', true)
          }
        ],
        tips: "Listen for specific examples they mention - they'll be useful later."
      },
      {
        phase: "Device Usage",
        mainPrompt: "What types of devices do you use regularly?",
        conditionalPrompts: {
          experiencedUser: "Which devices do you use for different tasks?",
          needsHelp: "What device do you feel most comfortable using?"
        },
        choices: [
          {
            text: "Multiple devices",
            next: "multiDevice",
            action: () => updateFlag('usesMultipleDevices', true)
          },
          {
            text: "Single primary device",
            next: "singleDevice"
          }
        ],
        tips: "Note which devices they mention most enthusiastically."
      },
      {
        phase: "Learning Experience",
        mainPrompt: "How do you usually learn to use new technology?",
        conditionalPrompts: {
          experiencedUser: "What's your preferred way to learn advanced features?",
          needsHelp: "What makes learning new technology easier for you?"
        },
        followUps: {
          multiDevice: ["How do you handle learning different interfaces?"],
          singleDevice: ["What made you choose this as your main device?"]
        },
        tips: "Their learning preferences will inform later questions about specific technologies."
      },
      {
        phase: "Technology Emotions",
        mainPrompt: "How does using new technology make you feel?",
        choices: [
          {
            text: "Anxious/Nervous",
            next: "support",
            action: () => updateFlag('hasAnxiety', true)
          },
          {
            text: "Excited/Curious",
            next: "exploration"
          },
          {
            text: "Neutral/Task-focused",
            next: "practical"
          }
        ],
        tips: "Watch for emotional cues that might contradict their verbal response."
      }
    ],
    expert: [
      {
        phase: "Advanced Usage",
        mainPrompt: "What advanced features do you use that others might not know about?",
        followUps: ["How did you discover these features?", "What makes them valuable to you?"],
        tips: "Look for insights about discovery and learning patterns."
      }
    ],
    beginner: [
      {
        phase: "Challenges",
        mainPrompt: "What's the most challenging part about using technology?",
        followUps: ["What would make it easier?", "Who do you ask for help?"],
        tips: "Focus on identifying specific pain points and current coping strategies."
      }
    ]
  };

  const [notes, setNotes] = useState({});
  const [showFollowUp, setShowFollowUp] = useState(false);

  const getCurrentScript = () => {
    return script[path] || script.main;
  };

  const getCurrentQuestion = () => {
    const currentScript = getCurrentScript();
    return currentScript[currentStep] || currentScript[0];
  };

  const handleChoice = (choice) => {
    if (choice.action) {
      choice.action();
    }
    if (choice.next) {
      setPath(choice.next);
      setCurrentStep(0);
    } else {
      handleNext();
    }
  };

  const handleNext = () => {
    const currentScript = getCurrentScript();
    if (currentStep < currentScript.length - 1) {
      setCurrentStep(prev => prev + 1);
    } else if (path !== 'main') {
      setPath('main');
      setCurrentStep(prev => prev + 1);
    }
    setShowFollowUp(false);
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    } else if (path !== 'main') {
      setPath('main');
      setCurrentStep(prev => prev - 1);
    }
    setShowFollowUp(false);
  };

  const currentQuestion = getCurrentQuestion();

  if (!currentQuestion) {
    return <div>Loading interview guide...</div>;
  }

  return (
    <div className="max-w-4xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between items-center">
            <span>{currentQuestion.phase}</span>
            <div className="flex items-center space-x-2">
              <button
                onClick={handlePrev}
                className="p-2 rounded hover:bg-gray-100 disabled:opacity-50"
                disabled={currentStep === 0 && path === 'main'}
              >
                <ChevronLeft className="w-6 h-6" />
              </button>
              <span className="text-sm">
                {path !== 'main' ? `${path} path` : `${currentStep + 1} / ${getCurrentScript().length}`}
              </span>
              <button
                onClick={handleNext}
                className="p-2 rounded hover:bg-gray-100 disabled:opacity-50"
                disabled={currentStep === getCurrentScript().length - 1 && path === 'main'}
              >
                <ChevronRight className="w-6 h-6" />
              </button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <p className="text-lg font-medium">
                {flags[Object.keys(flags).find(flag => flags[flag] && currentQuestion.conditionalPrompts?.[flag])] 
                  ? currentQuestion.conditionalPrompts[Object.keys(flags).find(flag => flags[flag])]
                  : currentQuestion.mainPrompt}
              </p>
            </div>

            {currentQuestion.choices && (
              <div className="space-y-2">
                {currentQuestion.choices.map((choice, idx) => (
                  <button
                    key={idx}
                    onClick={() => handleChoice(choice)}
                    className="w-full p-2 text-left rounded hover:bg-gray-100 border"
                  >
                    {choice.text}
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.followUps && (
              <div className="flex space-x-4">
                <button
                  onClick={() => setShowFollowUp(!showFollowUp)}
                  className="flex items-center space-x-2 text-blue-500 hover:text-blue-600"
                >
                  <MessageCircle className="w-4 h-4" />
                  <span>Follow-up Questions</span>
                </button>
              </div>
            )}

            {showFollowUp && (
              <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                {(typeof currentQuestion.followUps === 'object' 
                  ? currentQuestion.followUps[Object.keys(flags).find(flag => flags[flag])] 
                  : currentQuestion.followUps)?.map((followUp, idx) => (
                  <p key={idx} className="text-gray-700">â€¢ {followUp}</p>
                ))}
              </div>
            )}

            <div className="bg-yellow-50 p-4 rounded-lg">
              <p className="font-medium text-yellow-800">ðŸ’¡ Interviewer Tips:</p>
              <p className="text-yellow-800">{currentQuestion.tips}</p>
            </div>

            <div>
              <p className="font-medium mb-2">Notes:</p>
              <textarea
                className="w-full p-2 border rounded"
                rows="4"
                value={notes[`${path}-${currentStep}`] || ''}
                onChange={(e) => setNotes(prev => ({
                  ...prev,
                  [`${path}-${currentStep}`]: e.target.value
                }))}
                placeholder="Record key points and observations here..."
              />
            </div>

            {Object.entries(flags).filter(([_, value]) => value).length > 0 && (
              <div className="bg-gray-50 p-2 rounded-lg">
                <div className="flex items-center space-x-2">
                  <Flag className="w-4 h-4 text-blue-500" />
                  <span className="text-sm font-medium">Active Flags:</span>
                </div>
                <div className="mt-1 text-sm text-gray-600">
                  {Object.entries(flags)
                    .filter(([_, value]) => value)
                    .map(([key]) => key)
                    .join(', ')}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdaptiveInterviewGuide;